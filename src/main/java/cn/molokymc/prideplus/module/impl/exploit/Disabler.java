package cn.molokymc.prideplus.module.impl.exploit;

import cn.molokymc.prideplus.Pride;
import cn.molokymc.prideplus.event.impl.player.UpdateEvent;
import cn.molokymc.prideplus.module.settings.impl.BooleanSetting;
import cn.molokymc.prideplus.module.settings.impl.MultipleBoolSetting;
import cn.molokymc.prideplus.viamcp.common.ViaMCPCommon;
import com.viaversion.viarewind.protocol.protocol1_8to1_9.Protocol1_8To1_9;
import com.viaversion.viaversion.api.Via;
import com.viaversion.viaversion.api.protocol.packet.PacketWrapper;
import com.viaversion.viaversion.api.protocol.version.ProtocolVersion;
import com.viaversion.viaversion.api.type.Type;
import cn.molokymc.prideplus.event.impl.game.WorldEvent;
import cn.molokymc.prideplus.event.impl.network.PacketReceiveEvent;
import cn.molokymc.prideplus.event.impl.network.PacketSendEvent;
import cn.molokymc.prideplus.event.impl.player.MotionEvent;
import cn.molokymc.prideplus.module.Category;
import cn.molokymc.prideplus.module.Module;
import cn.molokymc.prideplus.utils.server.PacketUtils;
import cn.molokymc.prideplus.utils.server.ServerUtils;
import cn.molokymc.prideplus.utils.time.TimerUtil;
import lombok.SneakyThrows;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.network.EnumPacketDirection;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.login.server.S01PacketEncryptionRequest;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;


import java.util.List;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;


public final class Disabler extends Module {

    public static final MultipleBoolSetting disablers = new MultipleBoolSetting("Disablers",
            new BooleanSetting("WD Temporary", false),
            new BooleanSetting("Grim", false));
    private final TimerUtil timer = new TimerUtil(), joinTimer = new TimerUtil();

    private boolean synced;

    private final CopyOnWriteArrayList<Packet> watchdogPlayerPackets = new CopyOnWriteArrayList<>(), watchdogC0FC00Packets = new CopyOnWriteArrayList<>(), watchdogInvPackets = new CopyOnWriteArrayList<>();

    private final CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList<>();
    private static boolean lastResult;
    private double s08Y;
    public static List<Packet<INetHandler>> storedPackets = new CopyOnWriteArrayList<>();
    public static boolean spiking;
    public static final TimerUtil spikeTimer = new TimerUtil();
    public static int count = 0;
    private int airTicks;
    static Disabler INSTANCE;

    private boolean lastSprinting = false;

    public static ConcurrentLinkedDeque<Integer> pingPackets = new ConcurrentLinkedDeque<>();

    public Disabler() {
        super("Disabler","削弱反作弊", Category.MISC, "Disables some anticheats");
        addSettings(disablers);
    }

    @Override
    public void onMotionEvent(MotionEvent event) {
        setSuffix("Done");
    }

    @Override
    public void onUpdateEvent(UpdateEvent event) {
        if (disablers.isEnabled("Grim")) {
            if (!getGrimPost()) {
                processPackets();
            }
        }
    }

    @SneakyThrows
    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        if (mc.thePlayer == null) return;
        if (ServerUtils.isOnHypixel() && ViaMCPCommon.getManager().getTargetVersion().newerThan(ProtocolVersion.v1_8)) {
            if (event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
                count += 1;
                final C08PacketPlayerBlockPlacement wrapped = (C08PacketPlayerBlockPlacement) event.getPacket();

                if (wrapped.getPosition().equals(new BlockPos(-1, -1, -1)) && wrapped.getPlacedBlockDirection() == 255) {
                    final PacketWrapper packetWrapper = PacketWrapper.create(29, null, Via.getManager().getConnectionManager().getConnections().iterator().next());
                    packetWrapper.write(Type.VAR_INT, 1);
                    packetWrapper.sendToServer(Protocol1_8To1_9.class, true);
                }
            }
        }
        if (disablers.isEnabled("Grim")) {
            if (event.getPacket() instanceof C0BPacketEntityAction) {
                if (((C0BPacketEntityAction) event.getPacket()).getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                    if (this.lastSprinting) {
                        event.setCancelled(true);
                    }
                    this.lastSprinting = true;
                } else if (((C0BPacketEntityAction) event.getPacket()).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                    if (!this.lastSprinting) {
                        event.setCancelled(true);
                    }
                    this.lastSprinting = false;
                }
            }
        }
    }
    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        for(BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                }
            }
        }
    }


    public static boolean grimPostDelay(final Packet<?> packet) {
        if (Disabler.mc.thePlayer == null) {
            return false;
        }
        if (Disabler.mc.currentScreen instanceof GuiDownloadTerrain) {
            return false;
        }
        if (packet instanceof S00PacketServerInfo) {
            return false;
        }
        if (packet instanceof S01PacketEncryptionRequest) {
            return false;
        }
        if (packet instanceof S38PacketPlayerListItem) {
            return false;
        }
        if (packet instanceof S00PacketDisconnect) {
            return false;
        }
        if (packet instanceof S40PacketDisconnect) {
            return false;
        }
        if (packet instanceof S21PacketChunkData) {
            return false;
        }
        if (packet instanceof S01PacketPong) {
            return false;
        }
        if (packet instanceof S44PacketWorldBorder) {
            return false;
        }
        if (packet instanceof S01PacketJoinGame) {
            return false;
        }
        if (packet instanceof S19PacketEntityHeadLook) {
            return false;
        }
        if (packet instanceof S3EPacketTeams) {
            return false;
        }
        if (packet instanceof S02PacketChat) {
            return false;
        }
        if (packet instanceof S2FPacketSetSlot) {
            return false;
        }
        if (packet instanceof S1CPacketEntityMetadata) {
            return false;
        }
        if (packet instanceof S20PacketEntityProperties) {
            return false;
        }
        if (packet instanceof S35PacketUpdateTileEntity) {
            return false;
        }
        if (packet instanceof S03PacketTimeUpdate) {
            return false;
        }
        if (packet instanceof S47PacketPlayerListHeaderFooter) {
            return false;
        }
        if (packet instanceof S12PacketEntityVelocity) {
            final S12PacketEntityVelocity sPacketEntityVelocity = (S12PacketEntityVelocity)packet;
            return sPacketEntityVelocity.getEntityID() == Disabler.mc.thePlayer.getEntityId();
        }
        return packet instanceof S27PacketExplosion || packet instanceof S32PacketConfirmTransaction || packet instanceof S08PacketPlayerPosLook || packet instanceof S18PacketEntityTeleport || packet instanceof S19PacketEntityStatus || packet instanceof S04PacketEntityEquipment || packet instanceof S23PacketBlockChange || packet instanceof S22PacketMultiBlockChange || packet instanceof S13PacketDestroyEntities || packet instanceof S00PacketKeepAlive || packet instanceof S06PacketUpdateHealth || packet instanceof S14PacketEntity || packet instanceof S0FPacketSpawnMob || packet instanceof S2DPacketOpenWindow || packet instanceof S30PacketWindowItems || packet instanceof S3FPacketCustomPayload || packet instanceof S2EPacketCloseWindow;
    }
    public static void processPackets() {
        if (!Disabler.storedPackets.isEmpty()) {
            for (final Packet<INetHandler> packet : Disabler.storedPackets) {
                final PacketReceiveEvent event = new PacketReceiveEvent(packet, EnumPacketDirection.CLIENTBOUND, Disabler.mc.getNetHandler());

                Pride.INSTANCE.getEventProtocol().handleEvent(event);

                if (event.isCancelled()) {
                    continue;
                }
                packet.processPacket(Disabler.mc.getNetHandler());
            }
            Disabler.storedPackets.clear();
        }
    }
    private boolean isBlockUnder() {
        if (mc.thePlayer.posY < 0) return false;
        for (int offset = 0; offset < (int) mc.thePlayer.posY + 2; offset += 2) {
            AxisAlignedBB bb = mc.thePlayer.getEntityBoundingBox().offset(0, -offset, 0);
            if (!mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, bb).isEmpty()) {
                return true;
            }
        }
        return false;
    }

    public static boolean getGrimPost() {
        final boolean result = disablers.isEnabled("Grim") && mc.thePlayer != null && mc.thePlayer.isEntityAlive() && mc.thePlayer.ticksExisted >= 10 && !(mc.currentScreen instanceof GuiDownloadTerrain);
        if (Disabler.lastResult && !result) {
            Disabler.lastResult = false;
            mc.addScheduledTask(Disabler::processPackets);
        }
        return Disabler.lastResult = result;
    }

    public static void fixC0F(C0FPacketConfirmTransaction packet) {
        int id = packet.getUid();
        if (id >= 0 || pingPackets.isEmpty()) {
            PacketUtils.sendPacketNoEvent(packet);
            return;
        }
        do {
            int current = pingPackets.getFirst();
            PacketUtils.sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), (short) current, true));
            pingPackets.pollFirst();
            if (current == id) {
                return;
            }
        } while (!pingPackets.isEmpty());
    }


    @Override
    public void onWorldEvent(WorldEvent event) {
        watchdogC0FC00Packets.clear();
        timer.reset();
    }
}

